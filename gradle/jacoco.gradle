// In here we can filter out what modules that we want to cover
def coveredProject = subprojects

// configure() method takes a list as an argument and applies the configuration to the projects in this list.
configure(coveredProject) { prj ->

    // Here we apply jacoco plugin to every project
    apply plugin: 'jacoco'

    // Set Jacoco version
    jacoco {
        toolVersion = "0.8.5"
    }

    // Here we create the task to generate Jacoco report
    // It depends to unit test task we don't have to manually running unit test before the task
    task jacocoReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {

        // Define what type of report we should generate
        // If we don't want to process the data further, html should be enough
        reports {
            csv.enabled = false
            xml.enabled = false
            html.enabled = false
        }

        // Setup the .class, source, and execution directories
        final fileFilter = [
                '**/R.class',
                '**/R$*.class',
                '**/BuildConfig.*',
                '**/Manifest*.*',
                '**/*$ViewInjector*.*',
                '**/*$ViewBinder*.*',
                '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
                '**/*Module.*', // Modules for Dagger.
                '**/*Dagger*.*', // Dagger auto-generated code.
                '**/*MembersInjector*.*', // Dagger auto-generated code.
                '**/*_Provide*Factory*.*',
                '**/*_Factory.*', //Dagger auto-generated code
                '**/*$*$*.*', // Anonymous classes generated by kotlin
                '**/*Test*.*',
                '**/BR.*',
                '**/*Extensions*.*',
                '**/*$Result.*', /* filtering `sealed` and `data` classes */
                '**/*$Result$*.*',/* filtering `sealed` and `data` classes */

                // Moxy
                '**/*RealmProxy.java',
                '**/*$PresentersBinder$*.class',
                '**/*$PresentersBinder.class',
                '**/*$ViewStateProvider.class',
                '**/*$State$*.class',
                '**/*$State.class',

                //add libraries
                'android/**/*.*',
                'com/**/*.*',
                'uk/**/*.*',
                'io/**/*.*',
                'moxy/*.*'
        ]

        // Include this if you use Kotlin
        final kotlinTree = fileTree(dir: "${prj.buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
        final javacTree = fileTree(dir: "${prj.buildDir}/intermediates/javac/debug", excludes: fileFilter)
        final mainSrc = "${prj.projectDir}/src/main/java"

        sourceDirectories.setFrom files([mainSrc])
        classDirectories.setFrom files([kotlinTree, javacTree])
        executionData.setFrom fileTree(dir: prj.buildDir, includes: [
                'jacoco/testDebugUnitTest.exec',
                'outputs/code-coverage/connected/*coverage.ec'
        ])
    }
}

apply plugin: 'jacoco'

task jacocoFullReport(type: JacocoReport, group: 'Coverage reports') {
    def projects = coveredProject

    // Here we depend on the jacocoReport task that we created before
    dependsOn(projects.jacocoReport)

    final source = files(projects.jacocoReport.sourceDirectories)

    additionalSourceDirs.setFrom source
    sourceDirectories.setFrom source

    classDirectories.setFrom files(projects.jacocoReport.classDirectories)
    executionData.setFrom files(projects.jacocoReport.executionData)

    reports {
        html {
            enabled true
            destination file('build/reports/jacoco/html')
        }
        csv {
            enabled false
            destination file('build/reports/jacoco/jacocoFullReport.csv')
        }
    }

    doFirst {
        //noinspection GroovyAssignabilityCheck
        executionData.setFrom files(executionData.findAll { it.exists() })
    }
}